//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Area23.At.Framework.Core.Static;

namespace Area23.At.Framework.Core.CqrXs.CqrJd
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://cqrjd.eu/cqrsrv/cqrjd/", ConfigurationName="Area23.At.Framework.Core.CqrXs.CqrJd.CqrServiceSoap")]
    public interface CqrServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/Send1StSrvMsg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Send1StSrvMsg(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/Send1StSrvMsg", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Send1StSrvMsgAsync(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomInvite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ChatRoomInvite(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomInvite", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ChatRoomInviteAsync(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomPoll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ChatRoomPoll(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomPoll", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ChatRoomPollAsync(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomPushMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ChatRoomPushMessage(string cryptMsg, string chatRoomMembersCrypted);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomPushMessage", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ChatRoomPushMessageAsync(string cryptMsg, string chatRoomMembersCrypted);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomClose", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ChatRoomClose(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/ChatRoomClose", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ChatRoomCloseAsync(string cryptMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/TestService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestService();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/TestService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/GetIPAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetIPAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/GetIPAddress", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetIPAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/TestCache", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://cqrjd.eu/cqrsrv/cqrjd/TestCache", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestCacheAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface CqrServiceSoapChannel : Area23.At.Framework.Core.CqrXs.CqrJd.CqrServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class CqrServiceSoapClient : System.ServiceModel.ClientBase<Area23.At.Framework.Core.CqrXs.CqrJd.CqrServiceSoap>, Area23.At.Framework.Core.CqrXs.CqrJd.CqrServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CqrServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CqrServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), CqrServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CqrServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CqrServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CqrServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CqrServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CqrServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string Send1StSrvMsg(string cryptMsg)
        {
            return base.Channel.Send1StSrvMsg(cryptMsg);
        }
        
        public System.Threading.Tasks.Task<string> Send1StSrvMsgAsync(string cryptMsg)
        {
            return base.Channel.Send1StSrvMsgAsync(cryptMsg);
        }
        
        public string ChatRoomInvite(string cryptMsg)
        {
            return base.Channel.ChatRoomInvite(cryptMsg);
        }
        
        public System.Threading.Tasks.Task<string> ChatRoomInviteAsync(string cryptMsg)
        {
            return base.Channel.ChatRoomInviteAsync(cryptMsg);
        }
        
        public string ChatRoomPoll(string cryptMsg)
        {
            return base.Channel.ChatRoomPoll(cryptMsg);
        }
        
        public System.Threading.Tasks.Task<string> ChatRoomPollAsync(string cryptMsg)
        {
            return base.Channel.ChatRoomPollAsync(cryptMsg);
        }
        
        public string ChatRoomPushMessage(string cryptMsg, string chatRoomMembersCrypted)
        {
            return base.Channel.ChatRoomPushMessage(cryptMsg, chatRoomMembersCrypted);
        }
        
        public System.Threading.Tasks.Task<string> ChatRoomPushMessageAsync(string cryptMsg, string chatRoomMembersCrypted)
        {
            return base.Channel.ChatRoomPushMessageAsync(cryptMsg, chatRoomMembersCrypted);
        }
        
        public string ChatRoomClose(string cryptMsg)
        {
            return base.Channel.ChatRoomClose(cryptMsg);
        }
        
        public System.Threading.Tasks.Task<string> ChatRoomCloseAsync(string cryptMsg)
        {
            return base.Channel.ChatRoomCloseAsync(cryptMsg);
        }
        
        public string TestService()
        {
            return base.Channel.TestService();
        }
        
        public System.Threading.Tasks.Task<string> TestServiceAsync()
        {
            return base.Channel.TestServiceAsync();
        }
        
        public string GetIPAddress()
        {
            return base.Channel.GetIPAddress();
        }
        
        public System.Threading.Tasks.Task<string> GetIPAddressAsync()
        {
            return base.Channel.GetIPAddressAsync();
        }
        
        public string TestCache()
        {
            return base.Channel.TestCache();
        }
        
        public System.Threading.Tasks.Task<string> TestCacheAsync()
        {
            return base.Channel.TestCacheAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
  
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CqrServiceSoap))
            {
#if HILLARIOUSTRUMPED
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
#else
                System.ServiceModel.BasicHttpsBinding result = new System.ServiceModel.BasicHttpsBinding();
#endif
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
#if HILLARIOUSTRUMPED
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.None;
#else
                result.Security.Mode = System.ServiceModel.BasicHttpsSecurityMode.Transport;
#endif
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.CqrServiceSoap12) || endpointConfiguration == EndpointConfiguration.CqrServiceSoapv4 ||
                endpointConfiguration == EndpointConfiguration.CqrServiceSoapv6)
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);

#if HILLARIOUSTRUMPED
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
#else
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);                
#endif
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CqrServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress(LibPaths.CqrServiceSoap);
            }
            if ((endpointConfiguration == EndpointConfiguration.CqrServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress(LibPaths.CqrServiceSoap12);
            }
            if ((endpointConfiguration == EndpointConfiguration.CqrServiceSoapv4))
            {
                return new System.ServiceModel.EndpointAddress(LibPaths.CqrServiceSoapv4);
            }
            if ((endpointConfiguration == EndpointConfiguration.CqrServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress(LibPaths.CqrServiceSoap12);
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        public enum EndpointConfiguration
        {

            CqrServiceSoap,

            CqrServiceSoap12,

            CqrServiceSoapv4,

            CqrServiceSoapv6,

        }

    }

}
